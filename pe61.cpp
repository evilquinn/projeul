/*
 * pe61.cpp
 *
 *  Created on: 13 Jun 2015
 *      Author: evilquinn
 */

#include "pe61.hpp"
#include <iostream>
#include <polygonal_numbers.hpp>

std::string& pe61::name()
{
    return name_;
}

void pe61::run()
{
    /*
     *
     * Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal
     * numbers are all figurate (polygonal) numbers and are generated by the
     * following formulae:
     *   Triangle     P(3,n)=n(n+1)/2       1, 3, 6, 10, 15, ...
     *   Square       P(4,n)=n2             1, 4, 9, 16, 25, ...
     *   Pentagonal   P(5,n)=n(3n−1)/2      1, 5, 12, 22, 35, ...
     *   Hexagonal    P(6,n)=n(2n−1)        1, 6, 15, 28, 45, ...
     *   Heptagonal   P(7,n)=n(5n−3)/2      1, 7, 18, 34, 55, ...
     *   Octagonal    P(8,n)=n(3n−2)        1, 8, 21, 40, 65, ...
     *
     * The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three
     * interesting properties.
     *
     * 1. The set is cyclic, in that the last two digits of each number is the
     * first two digits of the next number (including the last number with the
     * first).
     * 2. Each polygonal type: triangle (P(3,127)=8128), square (P(4,91)=8281),
     * and pentagonal (P(5,44)=2882), is represented by a different number in
     * the set.
     * 3. This is the only set of 4-digit numbers with this property.
     *
     * Find the sum of the only ordered set of six cyclic 4-digit numbers for
     * which each polygonal type: triangle, square, pentagonal, hexagonal,
     * heptagonal, and octagonal, is represented by a different number in the
     * set.
     *
     */

    // find range for 4 digit numbers of lists
    polygonal_numbers triangles(150, polygonal_numbers::triangle);
    polygonal_numbers squares(100, polygonal_numbers::square);
    polygonal_numbers pentagonals(82, polygonal_numbers::pentagonal);
    polygonal_numbers hexagonals(71, polygonal_numbers::hexagonal);
    polygonal_numbers heptagonals(64, polygonal_numbers::heptagonal);
    polygonal_numbers octagonals(59, polygonal_numbers::octagonal);


    bool check_triangles_start = true;
    bool check_triangles_end   = true;
    bool check_squares_start = true;
    bool check_squares_end   = true;
    bool check_pentagonals_start = true;
    bool check_pentagonals_end   = true;
    bool check_hexagonals_start = true;
    bool check_hexagonals_end   = true;
    bool check_heptagonals_start = true;
    bool check_heptagonals_end   = true;
    bool check_octagonals_start = true;
    bool check_octagonals_end   = true;

    for ( size_t i = 0; i < 10000; ++i )
    {
        if ( check_triangles_start &&
             triangles.get_term(i) > 1000 )
        {
            check_triangles_start = false;
            std::cout << "4 digit triangles start at [" << i << "] = "
                      << triangles.get_term(i) << std::endl;
        }
        if ( check_triangles_end &&
             triangles.get_term(i) > 9999 )
        {
            check_triangles_end = false;
            std::cout << "4 digit triangles end at [" << i << "] = "
                      << triangles.get_term(i) << std::endl;
        }
        if ( check_squares_start &&
             squares.get_term(i) > 1000 )
        {
            check_squares_start = false;
            std::cout << "4 digit squares start at [" << i << "] = "
                      << squares.get_term(i) << std::endl;
        }
        if ( check_squares_end &&
             squares.get_term(i) > 9999 )
        {
            check_squares_end = false;
            std::cout << "4 digit squares end at [" << i << "] = "
                      << squares.get_term(i) << std::endl;
        }
        if ( check_pentagonals_start &&
             pentagonals.get_term(i) > 1000 )
        {
            check_pentagonals_start = false;
            std::cout << "4 digit pentagonals start at [" << i << "] = "
                      << pentagonals.get_term(i) << std::endl;
        }
        if ( check_pentagonals_end &&
             pentagonals.get_term(i) > 9999 )
        {
            check_pentagonals_end = false;
            std::cout << "4 digit pentagonals end at [" << i << "] = "
                      << pentagonals.get_term(i) << std::endl;
        }
        if ( check_hexagonals_start &&
             hexagonals.get_term(i) > 1000 )
        {
            check_hexagonals_start = false;
            std::cout << "4 digit hexagonals start at [" << i << "] = "
                      << hexagonals.get_term(i) << std::endl;
        }
        if ( check_hexagonals_end &&
             hexagonals.get_term(i) > 9999 )
        {
            check_hexagonals_end = false;
            std::cout << "4 digit hexagonals end at [" << i << "] = "
                      << hexagonals.get_term(i) << std::endl;
        }
        if ( check_heptagonals_start &&
             heptagonals.get_term(i) > 1000 )
        {
            check_heptagonals_start = false;
            std::cout << "4 digit heptagonals start at [" << i << "] = "
                      << heptagonals.get_term(i) << std::endl;
        }
        if ( check_heptagonals_end &&
             heptagonals.get_term(i) > 9999 )
        {
            check_heptagonals_end = false;
            std::cout << "4 digit heptagonals end at [" << i << "] = "
                      << heptagonals.get_term(i) << std::endl;
        }
        if ( check_octagonals_start &&
             octagonals.get_term(i) > 1000 )
        {
            check_octagonals_start = false;
            std::cout << "4 digit octagonals start at [" << i << "] = "
                      << octagonals.get_term(i) << std::endl;
        }
        if ( check_octagonals_end &&
             octagonals.get_term(i) > 9999 )
        {
            check_octagonals_end = false;
            std::cout << "4 digit octagonals end at [" << i << "] = "
                      << octagonals.get_term(i) << std::endl;
        }
    }
}
